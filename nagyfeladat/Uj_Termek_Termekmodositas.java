/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nagyfeladat;

import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class Uj_Termek_Termekmodositas extends javax.swing.JFrame {
static  Integer Allapot=null;
Connection conn=null;
PreparedStatement pst=null;
ResultSet rs=null;
String Nevellenorzes=null;
static String cikkszam=null;
static String termeknev=null;
static String csoportkod=null;
static String ar=null;
static String egyseg=null;
static String keszlet=null;

    /**
     * Creates new form Uj_Termek_Termekmodositas
     */
    public Uj_Termek_Termekmodositas() {
        initComponents();
        jT_termek.getTableHeader().setFont(new Font("Arial", Font.BOLD, 18));
        jT_termek.setFont(new Font("Arial", Font.ITALIC, 14));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jT_termek = new javax.swing.JTable();
        jL_Termek = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jC_Tcs = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jT_Termek = new javax.swing.JTextField();
        jT_Cikkszam = new javax.swing.JTextField();
        jT_Ar = new javax.swing.JTextField();
        jT_Egyseg = new javax.swing.JTextField();
        jT_Keszlet = new javax.swing.JTextField();
        jB_felvesz = new javax.swing.JButton();
        jB_alap = new javax.swing.JButton();
        jB_Modos = new javax.swing.JButton();
        jB_Vissza = new javax.swing.JButton();
        jL_info = new javax.swing.JLabel();
        jL_Ft = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jT_termek.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "T_cikkszam", "T_nev", "Tcs_kod", "Tcs_nev", "T_ar", "T_egyseg", "Keszlet"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jT_termek.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_termekMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jT_termek);
        if (jT_termek.getColumnModel().getColumnCount() > 0) {
            jT_termek.getColumnModel().getColumn(0).setResizable(false);
            jT_termek.getColumnModel().getColumn(6).setResizable(false);
        }

        jL_Termek.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jL_Termek.setText("Termékek:");

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Cikkszám:");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setText("Termék név:");

        jC_Tcs.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel3.setText("Termékcsoport:");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel4.setText("Egység:");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel5.setText("Ár:");

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel6.setText("Készlet:");

        jT_Termek.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        jT_Cikkszam.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jT_Cikkszam.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jT_CikkszamKeyTyped(evt);
            }
        });

        jT_Ar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jT_Ar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jT_ArKeyTyped(evt);
            }
        });

        jT_Egyseg.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jT_Egyseg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jT_EgysegActionPerformed(evt);
            }
        });

        jT_Keszlet.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jT_Keszlet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jT_KeszletKeyTyped(evt);
            }
        });

        jB_felvesz.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jB_felvesz.setText("Felvitel");
        jB_felvesz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_felveszActionPerformed(evt);
            }
        });

        jB_alap.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jB_alap.setText("ALAPHELYZET");
        jB_alap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_alapActionPerformed(evt);
            }
        });

        jB_Modos.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jB_Modos.setText("Módosít");
        jB_Modos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ModosActionPerformed(evt);
            }
        });

        jB_Vissza.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jB_Vissza.setText("Vissza");
        jB_Vissza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_VisszaActionPerformed(evt);
            }
        });

        jL_info.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        jL_Ft.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jL_Ft.setText("Ft");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(46, 46, 46)
                            .addComponent(jB_alap)
                            .addGap(75, 75, 75)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                    .addGap(53, 53, 53)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jT_Termek)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jC_Tcs, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jT_Cikkszam, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(0, 0, Short.MAX_VALUE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jB_felvesz)
                                    .addGap(156, 156, 156)
                                    .addComponent(jB_Modos)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jB_Vissza)
                                    .addGap(24, 24, 24))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(53, 53, 53)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jT_Egyseg, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jT_Ar, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jL_Ft))
                                                .addComponent(jT_Keszlet, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(jLabel2))
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(126, 126, 126)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jL_Termek, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(278, 278, 278)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(235, 235, 235)
                        .addComponent(jL_info, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jL_Termek)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jL_info, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jT_Cikkszam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jT_Termek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jC_Tcs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jT_Ar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jL_Ft)))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jT_Egyseg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jT_Keszlet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jB_alap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB_felvesz)
                    .addComponent(jB_Modos)
                    .addComponent(jB_Vissza, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void combofresh()
    {
        jC_Tcs.removeAllItems();
        /*
        int sorokszama=jC_Tcs.getItemCount();
        for (int i = sorokszama-1; i >=0; i--)
        {
            jC_Tcs.remove(i);
        }
        */
        try
        {
            conn=EnSqlkapcsolatom.ConnectDB();
            String sql="SELECT * FROM Termekcsoport";
            Statement sta=conn.createStatement();
            ResultSet rs=sta.executeQuery(sql);
            
            while(rs.next())
            {
                 jC_Tcs.addItem(rs.getString("Tcs_nev"));
            }
            sta.close();
            conn.close();
        }
        catch (SQLException e)
        {
             JOptionPane.showMessageDialog(null, "Hiba a lekérdezésben!");
             System.out.println(e);
        }
    }
    
    private void tblfresh()
    {
        DefaultTableModel model = (DefaultTableModel)jT_termek.getModel();
        int sorokszama=model.getRowCount();
        for (int i = sorokszama-1; i >=0; i--)
        {
            model.removeRow(i);
        }
        
        try
        {
            conn=EnSqlkapcsolatom.ConnectDB();
            String sql="SELECT termek.T_cikkszam, termek.T_nev, termek.Tcs_kod, "
                    + "termekcsoport.Tcs_nev, termek.T_ar, termek.T_egyseg, termek.Keszlet "
                    + "FROM termek INNER JOIN termekcsoport ON termek.Tcs_kod = termekcsoport.Tcs_kod";
            Statement sta=conn.createStatement();
            ResultSet rs=sta.executeQuery(sql);
            
            while(rs.next())
            {
                model.addRow(new Object[]{rs.getInt("termek.T_cikkszam"),rs.getString("termek.T_nev"),rs.getInt("termek.Tcs_kod"),
                                         rs.getString("termekcsoport.Tcs_nev") , rs.getInt("termek.T_ar"),rs.getString("termek.T_egyseg"),rs.getInt("termek.Keszlet")});     
            }
            sta.close();
            conn.close();
        }
        catch (SQLException e)
        {
             JOptionPane.showMessageDialog(null, "Hiba a lekérdezésben!");
             System.out.println(e);
        }  
    }
    
    private void jT_EgysegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jT_EgysegActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jT_EgysegActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        tblfresh();
        combofresh();
        jB_alap.setEnabled(true);
        jB_Modos.setEnabled(false);
        jB_felvesz.setEnabled(true);
        jB_Vissza.setEnabled(true);
        jT_Cikkszam.enable(true);
        
    }//GEN-LAST:event_formWindowOpened

    private void jB_VisszaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_VisszaActionPerformed
        dispose();
    }//GEN-LAST:event_jB_VisszaActionPerformed

    private void jB_felveszActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_felveszActionPerformed
        jL_info.setText("");
        boolean ok=true;
        String kivalasztott_tcs_kod=null;
        if (ok)
        {
            if (jT_Cikkszam.getText().equals("") || jT_Termek.getText().equals("")
                     || jT_Ar.getText().equals("") || jT_Egyseg.getText().equals("") 
                    || jT_Keszlet.getText().equals("") || jC_Tcs.getSelectedItem().equals(""))
            {
                jL_info.setText("Ne hagyjon üres mezőket!");
                ok=false;
            }
            else
            {
                conn=EnSqlkapcsolatom.ConnectDB();
                // System.out.println(Belepes.Azon+" "+Belepes.Nev);
                String sql="Select * from Termek where T_cikkszam="+jT_Cikkszam.getText()+"";
                //System.out.println(sql);
                try
                {
                    Statement sta = conn.createStatement();
                    ResultSet rs= sta.executeQuery(sql);
                    if (rs.next())
                    {
                       Nevellenorzes=rs.getString("T_cikkszam");
                       System.out.println(Nevellenorzes);
                       jL_info.setText("Ez a kód már szerepel!");
                       ok=false; 
                    }
                    sta.close();
                    conn.close();
                }
                catch(Exception e)
                {
                        JOptionPane.showMessageDialog(null,e);
                }
            }
        }
        if (ok)
        {
            try
            {
                conn=EnSqlkapcsolatom.ConnectDB();
                Statement sta = conn.createStatement();
                String sqlin="SELECT Tcs_kod from Termekcsoport WHERE Tcs_nev='"+jC_Tcs.getSelectedItem()+"'";
                ResultSet rs= sta.executeQuery(sqlin);        
                if (rs.next())
                {
                    kivalasztott_tcs_kod=rs.getString("Tcs_kod");
                    System.out.println(kivalasztott_tcs_kod);
                }
                System.out.println(kivalasztott_tcs_kod);
                sta.close();
                conn.close(); 
            }
            catch(Exception e)
            {
                 System.out.println("Hiba"+e);
            } 
            
            try
            {
                conn=EnSqlkapcsolatom.ConnectDB(); 
                String sqlins="INSERT INTO Termek VALUES "
                 +"("+jT_Cikkszam.getText()+","
                 +"'"+jT_Termek.getText()+"',"
                 +""+kivalasztott_tcs_kod+","
                 +""+jT_Ar.getText()+","
                 +"'"+jT_Egyseg.getText()+"',"
                 +""+jT_Keszlet.getText()+")";
                Statement sta = conn.createStatement();
                sta.executeUpdate(sqlins);
                JOptionPane.showMessageDialog(null, "Insert megtörtént!");
                sta.close();
                conn.close();
            }
            catch(Exception e)
            {
                System.out.println("Hiba"+e);
                JOptionPane.showMessageDialog(null, "Sikertelen felvétel!");
            }
            tblfresh();
            //combofresh();
            jT_Cikkszam.setText("");
            jT_Termek.setText("");
            kivalasztott_tcs_kod=null;
            jT_Ar.setText("");
            jT_Egyseg.setText("");
            jT_Keszlet.setText("");
            jB_alap.setEnabled(true);
            jB_Modos.setEnabled(false);
            jB_felvesz.setEnabled(true);
            jB_Vissza.setEnabled(true);
        }
    }//GEN-LAST:event_jB_felveszActionPerformed
    
    private void jT_CikkszamKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jT_CikkszamKeyTyped
        char c = evt.getKeyChar();
        if (jT_Cikkszam.getText().equals(""))
        {
           if ( ((c < '1') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) 
           {
                evt.consume();  // ha nem szám, akkor ignorálja
           } 
        }
        else
        {
            if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) 
            {
                evt.consume();  // ha nem szám, akkor ignorálja
            } 
        }
    }//GEN-LAST:event_jT_CikkszamKeyTyped

    private void jT_ArKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jT_ArKeyTyped
        char c = evt.getKeyChar();
        if (jT_Ar.getText().equals(""))
        {
           if ( ((c < '1') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) 
           {
                evt.consume();  // ha nem szám, akkor ignorálja
           } 
        }
        else
        {
            if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) 
            {
                evt.consume();  // ha nem szám, akkor ignorálja
            } 
        }
    }//GEN-LAST:event_jT_ArKeyTyped

    private void jT_KeszletKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jT_KeszletKeyTyped
        char c = evt.getKeyChar();
        if (jT_Keszlet.getText().equals(""))
        {
           if ( ((c < '1') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) 
           {
                evt.consume();  // ha nem szám, akkor ignorálja
           } 
        }
        else
        {
            if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) 
            {
                evt.consume();  // ha nem szám, akkor ignorálja
            } 
        }
    }//GEN-LAST:event_jT_KeszletKeyTyped

    private void jB_alapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_alapActionPerformed
        // alaphelyzetbe hozza a formot, kiüríti a mezőket
        tblfresh();
        combofresh();
        jT_Cikkszam.enable(true);
        jT_Cikkszam.setText("");
        jT_Termek.setText("");
        jT_Ar.setText("");
        jT_Egyseg.setText("");
        jT_Keszlet.setText("");
        jB_alap.setEnabled(true);
        jB_Modos.setEnabled(false);
        jB_felvesz.setEnabled(true);
        jB_Vissza.setEnabled(true);
    }//GEN-LAST:event_jB_alapActionPerformed

    private void jT_termekMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_termekMouseClicked
        // (jTable1.getModel().getValueAt(sor,0).toString());
        int sor=jT_termek.getSelectedRow();
        cikkszam=jT_termek.getModel().getValueAt(sor,0).toString();
        termeknev=jT_termek.getModel().getValueAt(sor,1).toString();
        csoportkod=jT_termek.getModel().getValueAt(sor,3).toString();
        ar=jT_termek.getModel().getValueAt(sor,4).toString();
        egyseg=jT_termek.getModel().getValueAt(sor,5).toString();
        keszlet=jT_termek.getModel().getValueAt(sor,6).toString();
        jT_Cikkszam.setText(jT_termek.getModel().getValueAt(sor,0).toString());
        jT_Termek.setText(jT_termek.getModel().getValueAt(sor,1).toString());
        jC_Tcs.setSelectedItem(jT_termek.getModel().getValueAt(sor,3).toString());
        jT_Ar.setText(jT_termek.getModel().getValueAt(sor,4).toString());
        jT_Egyseg.setText(jT_termek.getModel().getValueAt(sor,5).toString());
        jT_Keszlet.setText(jT_termek.getModel().getValueAt(sor,6).toString());
        jB_alap.setEnabled(true);
        jB_Modos.setEnabled(true);
        jB_felvesz.setEnabled(false);
        jB_Vissza.setEnabled(true);
        jT_Cikkszam.enable(false);
    }//GEN-LAST:event_jT_termekMouseClicked

    private void jB_ModosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ModosActionPerformed
        jL_info.setText("");
        String kivalasztott_tcs_kod=null;
        //System.out.println(cikkszam + " " + termeknev+ " " + csoportkod+ " " + ar + " " + egyseg+ " " +keszlet);
        boolean ok=true;
        System.out.println(csoportkod.equals(jC_Tcs.getSelectedItem()));
        if (ok)
        {
            if (cikkszam.equals(jT_Cikkszam.getText()) &&
                    termeknev.equals(jT_Termek.getText()) &&
                    csoportkod.equals(jC_Tcs.getSelectedItem()) &&
                    ar.equals(jT_Ar.getText()) &&
                    egyseg.equals(jT_Egyseg.getText()) &&
                    keszlet.equals(jT_Keszlet.getText()))
                    {
                        ok=false;
                        jL_info.setText("Nincs változtatás");
                    }
        }
        if (ok)
        {
            try
            {
                conn=EnSqlkapcsolatom.ConnectDB();
                Statement sta = conn.createStatement();
                String sqltcs="Select Tcs_kod from termekcsoport where Tcs_nev='"+jC_Tcs.getSelectedItem()+"'";
                System.out.println(sqltcs);
                ResultSet rs= sta.executeQuery(sqltcs);
                if (rs.next())
                {
                    kivalasztott_tcs_kod=rs.getString("Tcs_kod");
                    System.out.println(kivalasztott_tcs_kod);
                }
                sta.close();
                conn.close();
                
            }
            catch(Exception e)
            {
                 jL_info.setText("Hiba"+e);
                 JOptionPane.showMessageDialog(null, "Frissítés sikertelen!");
            }
            try
            {
                conn=EnSqlkapcsolatom.ConnectDB();
                Statement sta = conn.createStatement();
                String sqlup="UPDATE termek SET  T_nev = '"+jT_Termek.getText()+"',"
                            + " Tcs_kod = "+kivalasztott_tcs_kod+","
                            + " T_ar = "+jT_Ar.getText()+","
                            + " T_egyseg = '"+jT_Egyseg.getText()+"',"
                            + " Keszlet = '"+jT_Keszlet.getText()+"'"
                            + " WHERE T_cikkszam = "+jT_Cikkszam.getText();
                System.out.println(sqlup);
                sta.executeUpdate(sqlup);        
                sta.close();
                conn.close(); 
                JOptionPane.showMessageDialog(null, "Frissítés sikeres!");
                tblfresh();
                combofresh();
                jT_Cikkszam.setText("");
                jT_Termek.setText("");
                jT_Ar.setText("");
                jT_Egyseg.setText("");
                jT_Keszlet.setText("");
                jB_alap.setEnabled(true);
                jB_Modos.setEnabled(false);
                jB_felvesz.setEnabled(true);
                jB_Vissza.setEnabled(true);
                jT_Cikkszam.setEnabled(true);
            }
            catch(Exception e)
            {
                 jL_info.setText("Hiba"+e);
                 JOptionPane.showMessageDialog(null, "Frissítés sikertelen!");
            }  
        }
    }//GEN-LAST:event_jB_ModosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Uj_Termek_Termekmodositas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Uj_Termek_Termekmodositas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Uj_Termek_Termekmodositas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Uj_Termek_Termekmodositas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Uj_Termek_Termekmodositas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_Modos;
    private javax.swing.JButton jB_Vissza;
    private javax.swing.JButton jB_alap;
    private javax.swing.JButton jB_felvesz;
    private javax.swing.JComboBox<String> jC_Tcs;
    private javax.swing.JLabel jL_Ft;
    private javax.swing.JLabel jL_Termek;
    private javax.swing.JLabel jL_info;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jT_Ar;
    private javax.swing.JTextField jT_Cikkszam;
    private javax.swing.JTextField jT_Egyseg;
    private javax.swing.JTextField jT_Keszlet;
    private javax.swing.JTextField jT_Termek;
    private javax.swing.JTable jT_termek;
    // End of variables declaration//GEN-END:variables
}
